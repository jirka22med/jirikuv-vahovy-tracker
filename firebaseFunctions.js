// firebaseFunctions.js
// Tento soubor obsahuje logiku pro Firebase Firestore s pokroƒçil√Ωm logov√°n√≠m.

// !!! Zde vlo≈æ cel√Ω konfiguraƒçn√≠ objekt, kter√Ω jsi zkop√≠roval z Firebase Console !!!
const firebaseConfig = {
  apiKey: "AIzaSyBCIHWbqCFJcCiuY-HFM3btTzUsByduluY",
  authDomain: "moje-vaha-beta-2.firebaseapp.com",
  projectId: "moje-vaha-beta-2",
  storageBucket: "moje-vaha-beta-2.firebasestorage.app",
  messagingSenderId: "870509063847",
  appId: "1:870509063847:web:6e0f922a1b8637e2713582"
  //measurementId: "G-D9FCW0YC2K"
};

// Inicializace Firebase aplikace
// Bude vol√°no a≈æ po naƒçten√≠ Firebase SDK
let db; // Promƒõnn√° pro instanci Firestore datab√°ze

// Pomocn√© funkce pro barevn√© logov√°n√≠
const logSuccess = (message, data = null) => {
    console.log(`%c‚úÖ SUCCESS: ${message}`, 'color: #22c55e; font-weight: bold;');
    if (data) console.log('%cData:', 'color: #22c55e;', data);
};

const logError = (message, error = null) => {
    console.log(`%c‚ùå ERROR: ${message}`, 'color: #ef4444; font-weight: bold;');
    if (error) console.error('%cError details:', 'color: #ef4444;', error);
};

const logInfo = (message, data = null) => {
    console.log(`%cüîµ INFO: ${message}`, 'color: #3b82f6; font-weight: bold;');
    if (data) console.log('%cData:', 'color: #3b82f6;', data);
};

const logWarning = (message, data = null) => {
    console.log(`%c‚ö†Ô∏è WARNING: ${message}`, 'color: #f59e0b; font-weight: bold;');
    if (data) console.log('%cData:', 'color: #f59e0b;', data);
};

const logProcess = (message) => {
    console.log(`%cüîÑ PROCESSING: ${message}`, 'color: #8b5cf6; font-weight: bold;');
};

window.initializeFirebaseApp = function() {
    logProcess('Zahajuji inicializaci Firebase aplikace...');
    
    try {
        // Kontrola dostupnosti Firebase SDK
        if (typeof firebase === 'undefined') {
            logError('Firebase SDK nen√≠ naƒçteno!');
            return false;
        }
        logSuccess('Firebase SDK √∫spƒõ≈°nƒõ naƒçteno');

        // Kontrolujeme, zda je glob√°ln√≠ objekt firebase a jeho metody dostupn√©.
        // Metoda getApps() zkontroluje, zda u≈æ Firebase aplikace nebyla inicializov√°na.
        if (!firebase.apps.length) {
            logProcess('Inicializuji novou Firebase aplikace...');
            firebase.initializeApp(firebaseConfig);
            logSuccess('Firebase aplikace √∫spƒõ≈°nƒõ inicializov√°na', {
                projectId: firebaseConfig.projectId,
                authDomain: firebaseConfig.authDomain
            });
        } else {
            logWarning('Firebase aplikace ji≈æ byla d≈ô√≠ve inicializov√°na');
        }
        
        // Z√≠sk√°me instanci Firestore datab√°ze
        logProcess('P≈ôipojuji se k Firestore datab√°zi...');
        db = firebase.firestore();
        
        if (db) {
            logSuccess('Firestore datab√°ze √∫spƒõ≈°nƒõ p≈ôipojena a p≈ôipravena k pou≈æit√≠');
            logInfo('Datab√°ze je p≈ôipravena pro operace', {
                type: 'Firestore',
                project: firebaseConfig.projectId
            });
            return true;
        } else {
            logError('Nepoda≈ôilo se z√≠skat instanci Firestore datab√°ze');
            return false;
        }
        
    } catch (error) {
        logError('Kritick√° chyba p≈ôi inicializaci Firebase', error);
        return false;
    }
};

// Funkce pro ulo≈æen√≠ dat do Firestore
window.saveWeightLogToFirestore = async function(weightLogArray) {
    logProcess(`Zahajuji ukl√°d√°n√≠ ${weightLogArray.length} z√°znam≈Ø do Firestore...`);
    
    if (!db) {
        logError('Firestore datab√°ze nen√≠ inicializov√°na, nelze ulo≈æit data');
        throw new Error("Firestore datab√°ze nen√≠ p≈ôipravena k ulo≈æen√≠ dat.");
    }
    logSuccess('Firestore datab√°ze je p≈ôipravena pro z√°pis');

    try {
        logProcess('Vytv√°≈ô√≠m batch operaci pro efektivn√≠ z√°pis...');
        const batch = db.batch(); // Pou≈æ√≠v√°me batch pro efektivnƒõj≈°√≠ z√°pis v√≠ce dokument≈Ø
        let processedCount = 0;

        weightLogArray.forEach((entry, index) => {
            logInfo(`Zpracov√°v√°m z√°znam ${index + 1}/${weightLogArray.length}`, {
                date: entry.date,
                weight: entry.weight
            });
            
            // Pou≈æ√≠v√°me datum jako ID dokumentu pro jednoduch√Ω upsert (aktualizace/vlo≈æen√≠)
            const docRef = db.collection('weightEntries').doc(entry.date); 
            
            batch.set(docRef, {
                date: entry.date,
                weight: entry.weight,
                bodyFat: entry.bodyFat,
                muscleMass: entry.muscleMass,
                bodyWater: entry.bodyWater,
                manualBMR: entry.manualBMR,
                manualAMR: entry.manualAMR,
                notes: entry.notes || '',
            });
            
            processedCount++;
        });

        logSuccess(`V≈°ech ${processedCount} z√°znam≈Ø p≈ôipraveno pro z√°pis`);
        logProcess('Odes√≠l√°m batch operaci do Firestore...');
        
        await batch.commit(); // Odesl√°n√≠ v≈°ech z√°pis≈Ø
        
        logSuccess(`Data √∫spƒõ≈°nƒõ ulo≈æena do Firestore! Ulo≈æeno ${processedCount} z√°znam≈Ø`, {
            collection: 'weightEntries',
            recordsCount: processedCount
        });
        return true;
        
    } catch (error) {
        logError('Kritick√° chyba p≈ôi ukl√°d√°n√≠ dat do Firestore', error);
        throw error;
    }
};

// Funkce pro naƒçten√≠ dat z Firestore
window.loadWeightLogFromFirestore = async function() {
    logProcess('Zahajuji naƒç√≠t√°n√≠ dat z Firestore...');
    
    if (!db) {
        logError('Firestore datab√°ze nen√≠ inicializov√°na, nelze naƒç√≠st data');
        return []; // Vra≈• pr√°zdn√© pole, pokud datab√°ze nen√≠ p≈ôipravena
    }
    logSuccess('Firestore datab√°ze je p≈ôipravena pro ƒçten√≠');

    try {
        logProcess('Odes√≠l√°m dotaz do Firestore kolekce "weightEntries"...');
        const snapshot = await db.collection('weightEntries').orderBy('date').get();
        
        if (snapshot.empty) {
            logWarning('Kolekce je pr√°zdn√° - nebyla nalezena ≈æ√°dn√° data');
            return [];
        }
        
        logInfo(`Nalezeno ${snapshot.size} dokument≈Ø v kolekci`);
        
        const loadedData = [];
        let processedDocs = 0;
        
        snapshot.forEach(doc => {
            const data = doc.data();
            const record = {
                date: data.date,
                weight: data.weight,
                bodyFat: data.bodyFat || null,
                muscleMass: data.muscleMass || null,
                bodyWater: data.bodyWater || null,
                manualBMR: data.manualBMR || null,
                manualAMR: data.manualAMR || null,
                notes: data.notes || ''
            };
            
            loadedData.push(record);
            processedDocs++;
            
            logInfo(`Zpracov√°n dokument ${processedDocs}/${snapshot.size}`, {
                id: doc.id,
                date: data.date,
                weight: data.weight
            });
        });
        
        logSuccess(`Data √∫spƒõ≈°nƒõ naƒçtena z Firestore! Naƒçteno ${loadedData.length} z√°znam≈Ø`, {
            collection: 'weightEntries',
            recordsCount: loadedData.length,
            dateRange: loadedData.length > 0 ? {
                from: loadedData[0].date,
                to: loadedData[loadedData.length - 1].date
            } : null
        });
        
        return loadedData;
        
    } catch (error) {
        logError('Kritick√° chyba p≈ôi naƒç√≠t√°n√≠ dat z Firestore', error);
        throw error;
    }
};

// Funkce pro smaz√°n√≠ z√°znamu z Firestore
window.deleteWeightEntryFromFirestore = async function(date) {
    logProcess(`Zahajuji maz√°n√≠ z√°znamu pro datum: ${date}`);
    
    if (!db) {
        logError('Firestore datab√°ze nen√≠ inicializov√°na, nelze smazat data');
        throw new Error("Firestore datab√°ze nen√≠ p≈ôipravena ke smaz√°n√≠ dat.");
    }
    logSuccess('Firestore datab√°ze je p≈ôipravena pro maz√°n√≠');
    
    try {
        logProcess(`Odes√≠l√°m po≈æadavek na smaz√°n√≠ dokumentu s ID: ${date}`);
        await db.collection('weightEntries').doc(date).delete();
        
        logSuccess(`Z√°znam pro datum ${date} √∫spƒõ≈°nƒõ smaz√°n z Firestore`, {
            collection: 'weightEntries',
            deletedDocument: date
        });
        return true;
        
    } catch (error) {
        logError(`Kritick√° chyba p≈ôi maz√°n√≠ z√°znamu pro datum ${date} z Firestore`, error);
        throw error;
    }
};

// Funkce pro smaz√°n√≠ v≈°ech dat z kolekce Firestore (POZOR! D≈Øraznƒõ! Z√°mƒõrn√© maz√°n√≠ v≈°ech dat!)
window.clearAllFirestoreData = async function() {
    logWarning('‚ö†Ô∏è POZOR! Zahajuji maz√°n√≠ V≈†ECH dat z Firestore!');
    
    if (!db) {
        logError('Firestore datab√°ze nen√≠ inicializov√°na, nelze smazat v≈°echna data');
        throw new Error("Firestore datab√°ze nen√≠ p≈ôipravena ke smaz√°n√≠ v≈°ech dat.");
    }
    logSuccess('Firestore datab√°ze je p≈ôipravena pro hromadn√© maz√°n√≠');

    try {
        logProcess('Naƒç√≠t√°m v≈°echny dokumenty z kolekce "weightEntries"...');
        const collectionRef = db.collection('weightEntries');
        const snapshot = await collectionRef.get();
        
        if (snapshot.empty) {
            logWarning('Kolekce je ji≈æ pr√°zdn√° - nen√≠ co mazat');
            return true;
        }
        
        logInfo(`Nalezeno ${snapshot.size} dokument≈Ø k smaz√°n√≠`);
        logProcess('Vytv√°≈ô√≠m batch operaci pro hromadn√© maz√°n√≠...');
        
        const batch = db.batch();
        let docsToDelete = 0;

        snapshot.docs.forEach(doc => {
            batch.delete(doc.ref);
            docsToDelete++;
            logInfo(`P≈ôid√°n dokument do batch maz√°n√≠: ${doc.id}`);
        });

        logProcess(`Odes√≠l√°m batch operaci pro smaz√°n√≠ ${docsToDelete} dokument≈Ø...`);
        await batch.commit();
        
        logSuccess(`V≈°echna data z Firestore kolekce 'weightEntries' √∫spƒõ≈°nƒõ smaz√°na!`, {
            collection: 'weightEntries',
            deletedDocuments: docsToDelete
        });
        return true;
        
    } catch (error) {
        logError('Kritick√° chyba p≈ôi maz√°n√≠ v≈°ech dat z Firestore', error);
        throw error;
    }
};
